# -*- coding: utf-8 -*-
"""Minor PCOS latest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zw-ybhxWJEF677lr_JRnPWtS5xft-uwh
"""

import pandas as pd

df=pd.read_csv("PCOS ANALYSIS NEW.csv")
df.head()
df.columns

df.columns=['time','diaganosed','result','age','overweight','weightgain','periods','conceiving','chinHair','cheeksHair','upperLipHair','betweenBreastHair','armsHair','innerThighHair','acneOrskinTag','hairThinning','darkPatch','tiredness','moodSwings','exercise','eatOutside','cannedFood','city']

new=pd.DataFrame(df[df.diaganosed=='Yes'])

new

new.reset_index(drop=True,inplace=True)
new

new.drop('time',axis=1,inplace=True)
new

new.weightgain.fillna('abc',inplace=True)


y=pd.DataFrame(new.result)

y.head()

new.drop('result',axis=1,inplace=True)
new

def f(s):
    if(s=="Yes"):
        return 1
    if(s=="No"):
        return 0

def g(s):
    if(s=="YES"):
        return 1
    if(s=="NO"):
        return 0
    if s=="Yes":
        return 1
    if s=="No":
        return 0
    if s=="abc":
        return 2

new["Diaganose"]=new.diaganosed.apply(f)
new["Overweight"]=new.overweight.apply(g)
new["Weightgain"]=new.weightgain.apply(g)
new["Periods"]=new.periods.apply(f)
new["Conceiving"]=new.conceiving.apply(f)
new["AcneOrskinTag"]=new.acneOrskinTag.apply(f)
new["HairThinning"]=new.hairThinning.apply(f)
new["DarkPatch"]=new.darkPatch.apply(f)
new["Tiredness"]=new.tiredness.apply(f)
new["MoodSwings"]=new.moodSwings.apply(f)
new["CannedFood"]=new.cannedFood.apply(f)
new["City"]=new.city.apply(f)
new.head()
del new["diaganosed"]
del new["overweight"]
del new["weightgain"]
del new["periods"]
del new["conceiving"]
del new["acneOrskinTag"]
del new["hairThinning"]
del new["darkPatch"]
del new["tiredness"]
del new["moodSwings"]
del new["cannedFood"]
del new["city"]
new.head()

new.isnull().sum()

def f(s):
    if(s=="Yes"):
        return True
    if(s=="No"):
        return False
    if(s=="Yes(Detected Positive)"):
        return True
    if(s=="No(Detected Negative)"):
        return False
y=y.result.apply(f)

y.head()

xnew=new.values
ynew=y.values

ynew

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_std=sc.fit_transform(xnew)
x_std
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_std,ynew,random_state=3)

from sklearn.metrics import classification_report,confusion_matrix

from sklearn import decomposition
pca=decomposition.PCA()
pca.fit_transform(x_train)
total=sum(pca.explained_variance_)
k=0
current_var=0
while current_var/total<0.999:
    current_var+=pca.explained_variance_[k]
    k=k+1
k

pca=decomposition.PCA(n_components=k)
x_train_pca=pca.fit_transform(x_train)
x_test_pca=pca.transform(x_test)

from sklearn.svm import SVC
clf=SVC(kernel='linear',C=10000)
clf.fit(x_train,y_train)
ypredsvm=clf.predict(x_test)
clf.score(x_train,y_train),clf.score(x_test,y_test)

from sklearn.tree import DecisionTreeClassifier
clf1=DecisionTreeClassifier(random_state=6)
clf1.fit(x_train,y_train)
ypredDT=clf1.predict(x_test)
clf1.score(x_train,y_train),clf1.score(x_test,y_test)

from sklearn.naive_bayes import GaussianNB
clf2=GaussianNB()
clf2.fit(x_train,y_train)
ypredNB=clf2.predict(x_test)
clf2.score(x_train,y_train),clf2.score(x_test,y_test)

from sklearn.linear_model import LinearRegression
clf5=LinearRegression()
clf5.fit(x_train,y_train)
ypredLR=clf5.predict(x_test)
clf5.score(x_train,y_train),clf5.score(x_test,y_test)

from sklearn.linear_model import LogisticRegression
clf3 = LogisticRegression(C=3)
clf3.fit(x_train,y_train)
ypredLR=clf3.predict(x_test)
clf3.score(x_train,y_train),clf3.score(x_test,y_test)

from sklearn.ensemble import RandomForestClassifier
clf4 = RandomForestClassifier(max_depth = 7, random_state=0)
clf4.fit(x_train, y_train)
ypredRF=clf4.predict(x_test)
clf4.score(x_train,y_train),clf4.score(x_test,y_test)

from sklearn.neighbors import KNeighborsClassifier
clf6=KNeighborsClassifier(n_neighbors=5)
clf6.fit(x_train,y_train)
ypredKNN=clf6.predict(x_test)
clf6.score(x_train,y_train),clf6.score(x_test,y_test)

from sklearn.neural_network import MLPClassifier
clf7=MLPClassifier(hidden_layer_sizes=(20,),max_iter=10000)
clf7.fit(x_train,y_train)
ypredNN=clf7.predict(x_test)
clf7.score(x_train,y_train),clf7.score(x_test,y_test)

print(classification_report(y_test,ypredDT))
print(classification_report(y_test,ypredKNN))
print(classification_report(y_test,ypredLR))
print(classification_report(y_test,ypredNB))
print(classification_report(y_test,ypredNN))
print(classification_report(y_test,ypredRF))
print(classification_report(y_test,ypredsvm))

from sklearn.model_selection import cross_val_score
x_axis=[]
y_axis=[]
for i in range(1,14):
    clf=KNeighborsClassifier(n_neighbors=i)
    score=cross_val_score(clf,x_test,y_test)
    x_axis.append(i)
    y_axis.append(score.mean())
    print(i,score.mean())

print(cross_val_score(clf,x_test,y_test))
print(cross_val_score(clf1,x_test,y_test))
print(cross_val_score(clf2,x_test,y_test))
print(cross_val_score(clf3,x_test,y_test))

import pydotplus
from sklearn.tree import export_graphviz
dot_data = export_graphviz(clf1, out_file=None,
                          feature_names=new.columns,
                          class_names=['yes','no'])
graph = pydotplus.graph_from_dot_data(dot_data)
graph.write_pdf("pcos4.pdf")

df2=pd.read_csv("https://raw.githubusercontent.com/PCOS-Survey/PCOSData/master/PCOS-Data.csv",delimiter=",")
df2

len(df2.columns)

df2.columns=['patient','periods','weightgain','hair','patches','pimples','depression','familyDiabetes','mantainingBodyweight','oilyskin','hairThinning','eat','exercise','sleepAfter','wakeUp','hostel','personalProblems','peerPressure','dietrtyHabits','eatFastFoods','result']

df2.head()

df2.drop('patient',axis=1,inplace=True)
df2.head()

df2.describe()

df2.isnull().sum()

df2.dropna(inplace=True)

df2.describe()

df2.head()

df2.periods.unique()

df2.eatFastFoods.unique()

df2.hostel.unique()

def func(s):
    if s=='y':
        return 1
    if s=='n':
        return 0
    if s=='no':
        return 0
    if s=='No':
        return 0
    if s=='yes':
        return 1
    if s=='hm':
        return 1
    if s=='cc':
        return 0
    if s=='e':
        return 1
    if s=='ed':
        return 1
    if s=='w':
        return 2
    if s=='m':
        return 3
    if s=='y':
        return 4

def time(s):
    return(str(s[0:2]))

df2["newSleepAfter"]=df2.sleepAfter.apply(time)

df2.head()

df2["newWakeUp"]=df2.wakeUp.apply(time)
df2.head()

df2["Weightgain"]=df2.weightgain.apply(func)
df2["Hair"]=df2.hair.apply(func)
df2["Patches"]=df2.patches.apply(func)
df2["Pimples"]=df2.pimples.apply(func)
df2["Depression"]=df2.depression.apply(func)
df2["FamilyDiabetes"]=df2.familyDiabetes.apply(func)
df2["MaintainingBodyWeight"]=df2.mantainingBodyweight.apply(func)
df2["OilySkin"]=df2.oilyskin.apply(func)
df2["Hairthinning"]=df2.hairThinning.apply(func)
df2["Hostel"]=df2.hostel.apply(func)
df2["PersonalProblems"]=df2.personalProblems.apply(func)
df2["PeerPressure"]=df2.peerPressure.apply(func)
df2["DietryHabits"]=df2.dietrtyHabits.apply(func)
df2["EatFastFoods"]=df2.eatFastFoods.apply(func)

df2.head()

df2.columns

del df2['weightgain']
del df2['hair']
del df2['patches']
del df2['pimples']
del df2['depression']
del df2['familyDiabetes']
del df2['mantainingBodyweight']
del df2['oilyskin']
del df2['hairThinning']
del df2['eat']
del df2['exercise']
del df2['sleepAfter']
del df2['wakeUp']
del df2['hostel']
del df2['personalProblems']
del df2['peerPressure']
del df2['dietrtyHabits']
del df2['eatFastFoods']

def res(s):
    if s=='mb n' or s==' mb n':
        return False
    if s=='mb':
        return True
df2['Result']=df2.result.apply(res)
df2.head()

del df2["result"]
df2.head()

df2.periods.unique()

def periods(s):
    if s=='No':
        return 0
    if s=='yes':
        return 1
    if s=='hb':
        return 2
    if s=='im' or s=='Im':
        return 3
    if s=='ib':
        return 4
df2["Periods"]=df2.periods.apply(periods)
del df2["periods"]
df2.head()

df2.newWakeUp.unique()

df2.newSleepAfter.unique()

def news(s):
    if str(s)=='1:':
        return '1'
    if str(s)=='3:':
        return '3'
    if str(s)=='7:':
        return '7'
    if str(s)=='8:':
        return '8'
    if str(s)=='6:':
        return '6'
    if str(s)=='9:':
        return '9'
    else:
        return s

df2["WakeUp"]=df2.newWakeUp.apply(news)

df2["SleepAfter"]=df2.newSleepAfter.apply(news)

del df2["newSleepAfter"]
del df2["newWakeUp"]

df2.head()

y=df2.Result.values
y

del df2["Result"]

x=df2.values
x

x_train2,x_test2,y_train2,y_test2=train_test_split(x,y,random_state=3)

from sklearn.svm import SVC
clf=SVC(kernel='linear',C=100000)
clf.fit(x_train2,y_train2)
clf.score(x_train2,y_train2),clf.score(x_test2,y_test2)

from sklearn.tree import DecisionTreeClassifier
clf1=DecisionTreeClassifier()
clf1.fit(x_train2,y_train2)
clf1.score(x_train2,y_train2),clf1.score(x_test2,y_test2)

from sklearn.naive_bayes import GaussianNB
clf2=GaussianNB()
clf2.fit(x_train2,y_train2)
clf2.score(x_train2,y_train2),clf2.score(x_test2,y_test2)

from sklearn.linear_model import LinearRegression
clf5=LinearRegression()
clf5.fit(x_train2,y_train2)
clf5.score(x_train2,y_train2),clf5.score(x_test2,y_test2)

from sklearn.linear_model import LogisticRegression
clf3 = LogisticRegression(C=99)
clf3.fit(x_train2,y_train2)
clf3.score(x_train2,y_train2),clf3.score(x_test2,y_test2)

from sklearn.ensemble import RandomForestClassifier
clf4 = RandomForestClassifier(max_depth = 10, random_state=0)
clf4.fit(x_train2, y_train2)
clf4.score(x_train2,y_train2),clf4.score(x_test2,y_test2)

from sklearn.neighbors import KNeighborsClassifier
clf6=KNeighborsClassifier(n_neighbors=1)
clf6.fit(x_train2,y_train2)
clf6.score(x_train2,y_train2),clf6.score(x_test2,y_test2)

from sklearn.neural_network import MLPClassifier
clf7=MLPClassifier(hidden_layer_sizes=(12,),max_iter=10000)
clf7.fit(x_train2,y_train2)
ypredNN=clf7.predict(x_test2)
clf7.score(x_train2,y_train2),clf7.score(x_test2,y_test2)

from sklearn.model_selection import cross_val_score
x_axis=[]
y_axis=[]
for i in range(1,14):
    clf=KNeighborsClassifier(n_neighbors=i)
    score=cross_val_score(clf,x_test2,y_test2)
    x_axis.append(i)
    y_axis.append(score.mean())
    print(i,score.mean())